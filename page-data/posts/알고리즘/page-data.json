{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/알고리즘",
    "result": {"pageContext":{"currentCategory":"알고리즘","categories":["All","Projects","알고리즘","프로젝트","개발공부","featured","Ubuntu","자격증","개발정보","블로그"],"edges":[{"node":{"id":"ee23bb19-d526-5b51-8075-3ccb2a531a3f","excerpt":"문제 푸는데 필요한 정보 n가지 종류의 동전이 있음 각각의 동전을 몇개라도 사용해서 합이 k원이 되도록 하고 싶음 이 때 동전의 개수가 최소여야 함 동전의 구성이 같은데, 순서만 다른 것은 같은 경우 n은 1이상 100이하, k는 1이상 10000이하 동전의 가치는 100000이하의 자연수 가치가 같은 동전이 여러 번 주어질 수 있음 문제 푸는데 필요한 알고리즘 현재 동전을 만드는 방법은 주어진 동전을 하나씩 더해서 만드는 것이다. 예를 들어 13원의 경우 12원을 만들 수 있는 경우에 1원을 더하거나, 8원 경우의 수에 5원을 더하는 방식으로 따라서 dp 테이블을 inf 값으로 초기화 시키고 1원부터 K원까지 반복하면서 주어진 동전을 더하는 경우의 수 중 가장 작은 값을 저장시킨다. 실수한 내용 및 고찰 알고리즘은 맞게 구성했지만 문제를 제대로 읽지 않아 불가능한 경우 처리를 하지 않았고 범위를 잘 못 이해해 index 값을 벗어나 에러가 발생하는 실수를 했다. 한동안 알고리즘을…","fields":{"slug":"/Algorithm/BackJoon/15.2294/"},"frontmatter":{"categories":"알고리즘","title":"백준 2294, 동전2","date":"August 26, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/14.14503/"}},"previous":{"fields":{"slug":"/Projects/moa-diary/"}}},{"node":{"id":"b18e7bf4-9c98-5ee7-b9ad-2b2fc9fa4699","excerpt":"문제 푸는데 필요한 정보 N X M 크기의 직사각형으로 나타낼 수 있으며, 1 X 1 크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸 이다. 청소기는 바라보는 방향이 있으며, 동, 서, 남, 북 중 하나이다. 방의 각 칸은 좌표 (r, c)로 나타낼 수 있으며 이는 북쪽에서 r+1번째, 서쪽에서 c+1번째 칸을 가리킴 처음에 빈 칸은 전부 청소되지 않은 상태이다. 현재 칸이 청소되지 않은 경우, 현재 칸을 청소 현재 칸의 주변 4칸 중 청소되지 않은 빈칸이 없는 경우 2-1. 바라보는 방향을 유치한채로 한칸 후진 가능하면 한칸 후진하고 1번 2-2. 바라보는 방향의 뒤쪽칸이 벽이라 후진이 안되면 작동 멈춤 현재 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우 3-1. 반시계방향으로 90도 회전 3-2. 바라보는 뱡향을 기준으로 앞칸이 청소되지않은 빈칸이면 한칸 전진 3-3. 1번 문제 푸는데 필요한 알고리즘 위의 내용을 바탕으로 단순 구현 실수한 내용 및 고찰 …","fields":{"slug":"/Algorithm/BackJoon/14.14503/"},"frontmatter":{"categories":"알고리즘","title":"백준 14503, 로봇 청소기","date":"August 21, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/13.14891/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/15.2294/"}}},{"node":{"id":"47038c77-926a-58c5-8475-9d23b9d5febd","excerpt":"문제 푸는데 필요한 정보 8개의 톱니를 가진 톱니바퀴 4개가 일렬로 놓여져있음 톱니는 N극 또는 S극 중 하나 가장 왼쪽부터 오른쪽 톱니바뀌까지 1~4번 회전은 한칸을 기준, 시계방향, 반시계방향 존재 회전 후 맞닿은 극에 따라 다른 톱니가 회전할 수 있음 맛닿은 톱니의 극이 다르다면 먼저 회전한 톱니의 방향과 반대방향으로 회전 1~4번째 줄은 각 n번째 톱니바퀴의 상태 상태는 8개의 정수 12시 방향부터 시계 방향대로 순서가 주어짐 N극은 0, S극은 1 다섯째 줄은 회전횟수 K가 주어짐 다음 k개 줄에는 회전시킬 톱니 번호와 방향이 주어짐 방향이 1인 경우 시계 방향, -1인 경우는 반시계 방향 K는 1부터 100 문제 푸는데 필요한 알고리즘 각각의 톱니바퀴를 deque으로 설정 0번째를 12시방향으로 설정해서 시계방향으로 값 저장 시계방향으로 회전할 경우 pop해서, appendleft 실행 반시계방향으로 회전할 경우 popleft해서 append 실행 회전전 해당 톱니바퀴에…","fields":{"slug":"/Algorithm/BackJoon/13.14891/"},"frontmatter":{"categories":"알고리즘","title":"백준 14891, 톱니바퀴","date":"August 16, 2023"}},"next":{"fields":{"slug":"/Projects/eoulim/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/14.14503/"}}},{"node":{"id":"0eac63c1-e6d8-592b-8fc5-71ab7fa697e4","excerpt":"문제 푸는데 필요한 정보 처음에 양분은 모든 칸에 5만큼 들어가 있음 같은 칸에 여러 개의 나무가 심어져 있을 수 있음 M개의 나무를 심음가능하지만 봄에는 나무가 자신의 나이만큼 양분을 먹음, 나이 1증가 하나의 칸에 여러개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹음 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분은 못먹고 죽음 여름에는 죽은 나무가 양분으로 변하게 됌 죽은 나무의 나이 // 2 가 증가 가을에는 나무가 번식함, 번식하는 나무는 나이가 5의 배수여야함 인접한 8개의 칸에 나이가 1인 나무가 생김, 땅을 벗어나는 칸은 생기지 않음 로봇이 돌아디니면서 땅에 양분을 추가함, 각 칸에 추가되는 양은 A[r][c] K년이 지난 후 상도의 땅에 살아있는 나무의 개수를 구하라 문제 푸는데 필요한 알고리즘 N x N 사이즈의 deque를 원소로 갖는 2차원 배열을 생성, 양분을 원소로갖는 배열도 생성 필요한 위치에 나무를 appendleft 해서 작은 값이 0번째에 있…","fields":{"slug":"/Algorithm/BackJoon/12.16235/"},"frontmatter":{"categories":"알고리즘","title":"백준 16235, 나무 재테크","date":"August 15, 2023"}},"next":{"fields":{"slug":"/Algorithm/SWEA/11.1230/"}},"previous":{"fields":{"slug":"/Projects/taesan/"}}},{"node":{"id":"d70547b5-1f5c-58e5-821d-6b2670b14ec1","excerpt":"문제 푸는데 필요한 정보 0 ~ 999999 사이의 수로 표현되는 암호문이 있고, N개 모아 놓은 암호문 뭉치가 있음 암호문은 삽입, 삭제, 추가 3개의 명령어로 제어함 초기 암호문을 명령어를 통해 수정하고 결과의 첫 10개 암호문을 출력해야함 문제 푸는데 필요한 알고리즘 동적으로 길이가 증가해야하고 삽입 삭제 등의 연산이 존재하기에 배열이 아닌 ArrayList를 사용했다. 삽입할 때는 원하는 인덱스에 값을 추가하면 인덱스가 증가하기에 증가하는 인덱스에 맞춰 새로운값을 추가하면 된다. 삭제할 때는 삭제한 값 이후 원소들은 인덱스가 1이 줄기에 똑같은 인덱스에 대해 삭제 연산을 반복하면 된다. 추가의 경우에는 add 연산이 자동으로 마지막에 추가하기에 삭제와 마찬가지로 연산을 반복하면 된다. 실수한 내용 및 고찰 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","fields":{"slug":"/Algorithm/SWEA/11.1230/"},"frontmatter":{"categories":"알고리즘","title":"SWEA 1230, 암호문3","date":"August 14, 2023"}},"next":{"fields":{"slug":"/Algorithm/SWEA/10.10726/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/12.16235/"}}},{"node":{"id":"678c02e4-6a13-5e6d-aefa-fcf08e0e7c4a","excerpt":"문제 푸는데 필요한 정보 N, M이 주어지고 M의 마지막 N개의 비트가 모두 켜져 있으면 ON, 꺼져있으면 OFF를 출력해야한다. 문제 푸는데 필요한 알고리즘 비트마스킹을 통해 풀 수 있다. N개의 1로 이루어진 bit와 M을 AND 연산을 통해 N개의 1로 이루어진 bit이 그대로 나오면 ON을 출력하면 된다. 실수한 내용 및 고찰 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 특강에서 다른 분이 삼항연산자를 통해 푼 것을 보고 이번 풀이에 적용해보았는데 빠르게 조건문을 구현할 수 있어서 좋은거 같다. 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","fields":{"slug":"/Algorithm/SWEA/10.10726/"},"frontmatter":{"categories":"알고리즘","title":"SWEA 10726, 이진수 표현","date":"August 13, 2023"}},"next":{"fields":{"slug":"/Algorithm/SWEA/09.1288/"}},"previous":{"fields":{"slug":"/Algorithm/SWEA/11.1230/"}}},{"node":{"id":"1e3a6aa2-c480-575b-a70b-9d9c9a256391","excerpt":"문제 푸는데 필요한 정보 N번 양의 배수를 셈 수에서 본 숫자를 확인해야함 최소 몇번 양을 센 시점에 0에서 9까지의 모든 숫자를 볼 수 있는지 구해야 함 문제 푸는데 필요한 알고리즘 비트마스킹을 통해 쉽게 풀 수 있다. k번까지 세면서 지금까지 나온 수를 bit에 저장한다 n개의 1로 이루어진 비트를 쉽게 구하려면 1을 n번 shift하고 -1을 해주면 된다 실수한 내용 및 고찰 비트마스킹 사용하는 법을 알고 있었지만 n개의 1로 이루어진 비트를 shift하고 -1을 해줘서 구하는 방법은 생각을 못했었다. 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","fields":{"slug":"/Algorithm/SWEA/09.1288/"},"frontmatter":{"categories":"알고리즘","title":"SWEA 1288, 새로운 불면증 치료법","date":"August 12, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/08.14890/"}},"previous":{"fields":{"slug":"/Algorithm/SWEA/10.10726/"}}},{"node":{"id":"75833b96-e6fa-5f95-890d-f665e8e26af3","excerpt":"문제 푸는데 필요한 정보 길이란 한 행 또는 열 전부를 나타냄 경사로가 높아지는지, 낮아지는지에 따라 처리가 다름 L=2인 경우, 높이3 2개, 높이2 2개, 높이1 2개는 가능하지만 높이3 2개, 높이2 2개, 높이3 2개는 불가능하기 때문 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 시작은 왼쪽값 혹은 위쪽값 초기값(0번째 인덱스) 설정하고 다음 값이 같으면 개수 count를 한다 다른 값이면 차이가 1인지 확인하고 높이가 높아지면 지금 센 개수가 L 이상인지 확인한다 높이가 낮아지면 다시 개수를 count, check = true로 설정한다. (check는 개수를 파악해야함을 의미한다) 차이가 2이상이면 실패 처리를 한다. 해당 행 혹은 열에 대해 탐색이 끝나고 check를 한번 더 확인한다. L이 3이고 33322 와 같은 경우를 잡기 위해서이다. 실수한 내용 및 고찰 문제를 읽고 어떻게 접근할지 적어보면서 하니 확실히 헷갈리는 부분이 적어졌다. 하지만 행 혹은 열에 …","fields":{"slug":"/Algorithm/BackJoon/08.14890/"},"frontmatter":{"categories":"알고리즘","title":"백준 14890, 경사로","date":"August 10, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/07.3190/"}},"previous":{"fields":{"slug":"/Algorithm/SWEA/09.1288/"}}},{"node":{"id":"7340de19-71bf-5551-bd37-8f9cbedaf8ad","excerpt":"문제 푸는데 필요한 정보 우선 꼬리를 포함한 몸은 그대로 하고 머리만 다음칸 이동 벽이나 자기 자신의 몸과 부딪히면 종료 이동한 칸에 사과가 있다면 사과는 없어지고 머리는 그대로 없다면 몸길이를 줄여서 꼬리가 위치한 칸 비우기 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 현재 방향에 대한 정보를 담을 변수와 뱀의 몸통에 대한 정보를 담을 deque 자료구조와 visited를 활용한다. 뱀의 머리는 deque의 r쪽 꼬리는 l 쪽으로 위치해서 꼬리 처리는 popleft를 통해 하고 visited는 0으로 바꿔서 빈 공간으로 처리 실수한 내용 및 고찰 문제를 단계별로 풀려고 구현 단계를 정리하면서 풀었는데 많은 도움이 된거 같다. 하지만 문제를 제대로 읽지 않아 게임 시작 후 X초라는 설명을 X초마다로 이해해서 답이 나오지 않았었다. 또한 = 을 ==으로 처리하고 == 0 을 ==0로 처리하는등 사소한 실수를 아직도 많이 한다… 실제 코테에서는 이런 실수들이 더욱 보이지 않으니 …","fields":{"slug":"/Algorithm/BackJoon/07.3190/"},"frontmatter":{"categories":"알고리즘","title":"백준 3190, 뱀","date":"August 09, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/06.14499/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/08.14890/"}}},{"node":{"id":"744f8468-bcb3-5033-8fae-518f3d31af9a","excerpt":"문제 푸는데 필요한 정보 지도의 크기는 N X M 초기 주사위는 윗면은 1이고, 동쪽(오른쪽)을 바라보는 방향이 3인 상태로 놓여있음 주사위를 굴렸을 때 이동한 칸에 수가 0인지 아닌지에 따라 처리하는 경우의 수가 다름 주사위를 바깥으로 이동시키려고 하는 경우는 무시해야하며 출력도 해서는 안됌 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 주사위가 이동할 수 있는 방향은 상, 하, 좌, 우 이고 기억해야하는 값은 바닥면(cur), 반대면-윗면(op), 왼쪽(le), 오른쪽(ri), 위(up), 아래(dn)이다. 초기 값은 정해져 있고 함수를 통해 방향에 따라 값들을 변경해준다. 방향에 따른 값 변경은 아래와 같은 규칙을 가진다. 그 다음부터는 구현을 통해서 문제를 해결하면 된다. 실수한 내용 및 고찰 문제를 이해하는데 너무 많은 시간이 걸렸다. 쓰면서 문제를 빨리 이해하려고 노력해봐야겠다. 처음에는 주사위의 바닥면이 정해지면 상하좌우 값이 고정되어있다고 생각해서 풀었는데 같은 …","fields":{"slug":"/Algorithm/BackJoon/06.14499/"},"frontmatter":{"categories":"알고리즘","title":"백준 14499, 주사위 굴리기","date":"August 08, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/05.16234/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/07.3190/"}}},{"node":{"id":"1dc55a45-27d4-564e-ba31-05d0ec444c7c","excerpt":"문제 푸는데 필요한 정보 땅의 크기는 N x N, r행 c열에는 A[r][c]만큼의 인구가 존재 인접한 나라 사이에는 국경선이 존재 인구 이동은 하루 동안 진행 되며 인구 차이가 L 이상 R 이하인 국가 끼리는 국경선이 열림 - 연합 연합을 이루는 국가의 인구수는 (인구수 총합 / 국가의 수)가 된다. 소수점은 버림 문제 푸는데 필요한 알고리즘 dfs를 통해 해결할 수 있는 문제이다. 특정 방향 국가와는 연합이 가능하고 다른 방향 국가와는 연합이 불가능 할 수 있기에 전체 땅에서 연합은 1개 이상 존재할 수도있음 따라서 방문하지 않은 모든 노드에 대해 dfs를 수행한다. 인구 이동은 연합이 생기지 않을 때까지 반복되므로\r\nchanged 변수를 통해 인구 이동이 발생했는지를 확인한다. dfs를 수행할 때는 4방 탐색을 통해 진행 되며 연합이 생기는 나라의 인구 합도 같이 구한다. 연합이 생기는 경우에 chaged를 true로 설정한다. 또한 연합(4방 탐색을 통해 방문한 노드)를 기…","fields":{"slug":"/Algorithm/BackJoon/05.16234/"},"frontmatter":{"categories":"알고리즘","title":"백준 16234, 인구 이동","date":"August 07, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/04.1153/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/06.14499/"}}},{"node":{"id":"4a7a91ca-cc0e-5495-8a8a-a979387d3cf2","excerpt":"문제 푸는데 필요한 정보 임의의 자연수가 주어졌을 때 네 개의 소수의 합으로 분해해야 한다. 자연수의 범위가 1부터 1,000,000(백만)이다. 출력이 불가능한 경우는 -1을 출력한다. 문제 푸는데 필요한 알고리즘 백트래킹으로 접근해보았다. 분해해야하는 개수는 4개로 고정, 각각의 수는 모두 소수여야 하므로 주어지는 자연수 N이하의 모든 소수를 구해 배열을 구한다. 이 때 소수는 에라토스테네스의 체를 이용해 구한다. 길이가 4이고 합이 N일 때 문자열을 출력하고 종료하는 재귀함수를 작성한다. 배열의 모든 값에 대해 경우의 수를 찾는다. 찾는 중 길이가 4를 넘거나 합이 이미 N을 넘는 경우는 더 이상 찾을 필요가 없기에 이 때는 함수를 종료시킨다. 소수의 가장 작은 값부터 합을 더하기 시작하면 무조건 길이가 4가 될때까지 합 연산을 진행하게 되므로, 소수의 가장 큰 값부터 합을 더하기 시작해서 불필요한 연산들을 제거한다. (실수했던 부분)\r\n 실수한 내용 및 고찰 문제 자체는 어…","fields":{"slug":"/Algorithm/BackJoon/04.1153/"},"frontmatter":{"categories":"알고리즘","title":"백준 1153, 네 개의 소수","date":"August 06, 2023"}},"next":{"fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-deployment-test/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/05.16234/"}}},{"node":{"id":"f1b7ec26-111a-5c28-9728-05468eec2736","excerpt":"문제 푸는데 필요한 정보 전파의 기본 단위는 { 0 , 1 } 두 가지로 구성되어있으며, x+ ( ) 는 임의의 개수(최소 1개) x의 반복으로 이루어진 전파의 집합을 나타낸다. 반복을 의미하는 + 외에도 or 를 의미하는 | 기호가 있다. { x | y } 는 x 혹은 y 를 의미하는 것으로, { 0+ | 1+ } 는 { 0 , 1 , 00 , 11 , 000 , 111 , … } 의 집합을 의미한다. 정리하면 뒤에 ’+‘가 붙은 숫자는 최소 1번이상 반복되어야하며, 괄호 뒤에 붙은 경우는 해당 괄호가 1회 이상 반복되는 것이다. 문제에 있는 예시는 경우의 수가 순서대로 나오는 것이 아니여서 이해하는데 어려움이 있었다. 문제 푸는데 필요한 알고리즘 백트래킹으로 접근해보았다. 문제에서 제공하는 패턴인 (100+1+ | 01)+ 의 경우 우선 괄호안을 볼 때 100으로 시작하거나 100으로 시작하면 0이 반복 되어야 하고 0이 아닌 1이 나오게 되면 다음 0과 1에 따라 경우의 수가…","fields":{"slug":"/Algorithm/BackJoon/03.1013/"},"frontmatter":{"categories":"알고리즘","title":"백준 1013, Contact","date":"August 05, 2023"}},"next":{"fields":{"slug":"/Development/Linux/java-jdk-management/"}},"previous":{"fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-deployment-test/"}}},{"node":{"id":"29b44aba-bc46-55d1-bd89-1d49515bfbb9","excerpt":"문제 푸는데 필요한 정보 LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다. 예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다. 문제 푸는데 필요한 알고리즘 점화식을 세움으로써 해결할 수 있기에 해당 문제는 DP로 접근해야 한다. DP 테이블은 첫번째 (문자열의 길이+1) X (두번째 문자열의 길이+1) 크기의 2차원 배열이어야 한다. DP 테이블의 현재 값[x][y]이 정해지는 경우의 수는 총 2개이다. 두 문자열의 각각 위치[x][y]의 문자값이 같은 경우 이 두 문자는 아직 비교가 안되어야하기에 각 문자열의 -1 위치[x-1][y-1]에 대한 테이블 값에 +1을 한다. 같지 않은 경우 현재 문자가 다른 문자열의 이전 문자값([x-1][y] or [x][y-1])과 비교된 값 2개중 큰 값으로 정한다. 예를 들어 문자열이 ABCD와 ACBD…","fields":{"slug":"/Algorithm/BackJoon/02.9251/"},"frontmatter":{"categories":"알고리즘","title":"백준 9251, LCS","date":"July 27, 2023"}},"next":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-03/"}},"previous":{"fields":{"slug":"/Development/SSAFY/chrome-(ERR_SSL_PROTOCOL_ERROR)/"}}},{"node":{"id":"0575b4f0-aabd-53d1-b4c2-77cb0ff24cb6","excerpt":"문제 푸는데 필요한 정보 N X M 행렬로 표현되는 맵이 주어짐 0은 이동할 수 있는 곳, 1은 이동할 수 없는 곳 (1, 1)에서 (N, M)의 위치까지 최단 경로로 이동해야함 최단 경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말함 이 때 시작하는 칸과 끝나는 칸도 포함해서 세야함 이동 도중 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 한 개까지 부수고 이동해도 됌 한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸 문제 푸는데 필요한 알고리즘 전체적인 풀이법은 BFS를 통한 최단 경로를 구해내는 것과 유사하다. 하지만 이동 도중 벽을 한번 부술 수 있다는 것이 차이점 방문 처리의 경우에도 단순한 2차원 배열로는 불가능하다 한 지역이라도 벽을 부수고 온 경우와 벽을 부수지 않고 온 경우가 존재하기 때문 따라서 3차원 배열로 구현 ( 1일 때는 아직 부수지 않음, 0일 때는 이미 부수고 옴) 현재 위치에서 이동할 수 있는 경우의 수는 총 3가지이다. 벽을 부수지 …","fields":{"slug":"/Algorithm/BackJoon/01.2206/"},"frontmatter":{"categories":"알고리즘","title":"백준 2206, 벽 부수고 이동하기","date":"July 15, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-01/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}