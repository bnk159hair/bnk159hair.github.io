{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"47038c77-926a-58c5-8475-9d23b9d5febd","excerpt":"문제 푸는데 필요한 정보 8개의 톱니를 가진 톱니바퀴 4개가 일렬로 놓여져있음 톱니는 N극 또는 S극 중 하나 가장 왼쪽부터 오른쪽 톱니바뀌까지 1~4번 회전은 한칸을 기준, 시계방향, 반시계방향 존재 회전 후 맞닿은 극에 따라 다른 톱니가 회전할 수 있음 맛닿은 톱니의 극이 다르다면 먼저 회전한 톱니의 방향과 반대방향으로 회전 1~4번째 줄은 각 n번째 톱니바퀴의 상태 상태는 8개의 정수 12시 방향부터 시계 방향대로 순서가 주어짐 N극은 0, S극은 1 다섯째 줄은 회전횟수 K가 주어짐 다음 k개 줄에는 회전시킬 톱니 번호와 방향이 주어짐 방향이 1인 경우 시계 방향, -1인 경우는 반시계 방향 K는 1부터 100 문제 푸는데 필요한 알고리즘 각각의 톱니바퀴를 deque으로 설정 0번째를 12시방향으로 설정해서 시계방향으로 값 저장 시계방향으로 회전할 경우 pop해서, appendleft 실행 반시계방향으로 회전할 경우 popleft해서 append 실행 회전전 해당 톱니바퀴에…","fields":{"slug":"/Algorithm/BackJoon/13.14891/"},"frontmatter":{"categories":"알고리즘","title":"백준 14891, 톱니바퀴","date":"August 16, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/12.16235/"}},"previous":null},{"node":{"id":"0eac63c1-e6d8-592b-8fc5-71ab7fa697e4","excerpt":"문제 푸는데 필요한 정보 처음에 양분은 모든 칸에 5만큼 들어가 있음 같은 칸에 여러 개의 나무가 심어져 있을 수 있음 M개의 나무를 심음가능하지만 봄에는 나무가 자신의 나이만큼 양분을 먹음, 나이 1증가 하나의 칸에 여러개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹음 자신의 나이만큼 양분을 먹을 수 없는 나무는 양분은 못먹고 죽음 여름에는 죽은 나무가 양분으로 변하게 됌 죽은 나무의 나이 // 2 가 증가 가을에는 나무가 번식함, 번식하는 나무는 나이가 5의 배수여야함 인접한 8개의 칸에 나이가 1인 나무가 생김, 땅을 벗어나는 칸은 생기지 않음 로봇이 돌아디니면서 땅에 양분을 추가함, 각 칸에 추가되는 양은 A[r][c] K년이 지난 후 상도의 땅에 살아있는 나무의 개수를 구하라 문제 푸는데 필요한 알고리즘 N x N 사이즈의 deque를 원소로 갖는 2차원 배열을 생성, 양분을 원소로갖는 배열도 생성 필요한 위치에 나무를 appendleft 해서 작은 값이 0번째에 있…","fields":{"slug":"/Algorithm/BackJoon/12.16235/"},"frontmatter":{"categories":"알고리즘","title":"백준 16235, 나무 재테크","date":"August 15, 2023"}},"next":{"fields":{"slug":"/Algorithm/SWEA/11.1230/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/13.14891/"}}},{"node":{"id":"d70547b5-1f5c-58e5-821d-6b2670b14ec1","excerpt":"문제 푸는데 필요한 정보 0 ~ 999999 사이의 수로 표현되는 암호문이 있고, N개 모아 놓은 암호문 뭉치가 있음 암호문은 삽입, 삭제, 추가 3개의 명령어로 제어함 초기 암호문을 명령어를 통해 수정하고 결과의 첫 10개 암호문을 출력해야함 문제 푸는데 필요한 알고리즘 동적으로 길이가 증가해야하고 삽입 삭제 등의 연산이 존재하기에 배열이 아닌 ArrayList를 사용했다. 삽입할 때는 원하는 인덱스에 값을 추가하면 인덱스가 증가하기에 증가하는 인덱스에 맞춰 새로운값을 추가하면 된다. 삭제할 때는 삭제한 값 이후 원소들은 인덱스가 1이 줄기에 똑같은 인덱스에 대해 삭제 연산을 반복하면 된다. 추가의 경우에는 add 연산이 자동으로 마지막에 추가하기에 삭제와 마찬가지로 연산을 반복하면 된다. 실수한 내용 및 고찰 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","fields":{"slug":"/Algorithm/SWEA/11.1230/"},"frontmatter":{"categories":"알고리즘","title":"SWEA 1230, 암호문3","date":"August 14, 2023"}},"next":{"fields":{"slug":"/Algorithm/SWEA/10.10726/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/12.16235/"}}},{"node":{"id":"678c02e4-6a13-5e6d-aefa-fcf08e0e7c4a","excerpt":"문제 푸는데 필요한 정보 N, M이 주어지고 M의 마지막 N개의 비트가 모두 켜져 있으면 ON, 꺼져있으면 OFF를 출력해야한다. 문제 푸는데 필요한 알고리즘 비트마스킹을 통해 풀 수 있다. N개의 1로 이루어진 bit와 M을 AND 연산을 통해 N개의 1로 이루어진 bit이 그대로 나오면 ON을 출력하면 된다. 실수한 내용 및 고찰 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 특강에서 다른 분이 삼항연산자를 통해 푼 것을 보고 이번 풀이에 적용해보았는데 빠르게 조건문을 구현할 수 있어서 좋은거 같다. 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","fields":{"slug":"/Algorithm/SWEA/10.10726/"},"frontmatter":{"categories":"알고리즘","title":"SWEA 10726, 이진수 표현","date":"August 13, 2023"}},"next":{"fields":{"slug":"/Algorithm/SWEA/09.1288/"}},"previous":{"fields":{"slug":"/Algorithm/SWEA/11.1230/"}}},{"node":{"id":"1e3a6aa2-c480-575b-a70b-9d9c9a256391","excerpt":"문제 푸는데 필요한 정보 N번 양의 배수를 셈 수에서 본 숫자를 확인해야함 최소 몇번 양을 센 시점에 0에서 9까지의 모든 숫자를 볼 수 있는지 구해야 함 문제 푸는데 필요한 알고리즘 비트마스킹을 통해 쉽게 풀 수 있다. k번까지 세면서 지금까지 나온 수를 bit에 저장한다 n개의 1로 이루어진 비트를 쉽게 구하려면 1을 n번 shift하고 -1을 해주면 된다 실수한 내용 및 고찰 비트마스킹 사용하는 법을 알고 있었지만 n개의 1로 이루어진 비트를 shift하고 -1을 해줘서 구하는 방법은 생각을 못했었다. 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","fields":{"slug":"/Algorithm/SWEA/09.1288/"},"frontmatter":{"categories":"알고리즘","title":"SWEA 1288, 새로운 불면증 치료법","date":"August 12, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/08.14890/"}},"previous":{"fields":{"slug":"/Algorithm/SWEA/10.10726/"}}},{"node":{"id":"75833b96-e6fa-5f95-890d-f665e8e26af3","excerpt":"문제 푸는데 필요한 정보 길이란 한 행 또는 열 전부를 나타냄 경사로가 높아지는지, 낮아지는지에 따라 처리가 다름 L=2인 경우, 높이3 2개, 높이2 2개, 높이1 2개는 가능하지만 높이3 2개, 높이2 2개, 높이3 2개는 불가능하기 때문 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 시작은 왼쪽값 혹은 위쪽값 초기값(0번째 인덱스) 설정하고 다음 값이 같으면 개수 count를 한다 다른 값이면 차이가 1인지 확인하고 높이가 높아지면 지금 센 개수가 L 이상인지 확인한다 높이가 낮아지면 다시 개수를 count, check = true로 설정한다. (check는 개수를 파악해야함을 의미한다) 차이가 2이상이면 실패 처리를 한다. 해당 행 혹은 열에 대해 탐색이 끝나고 check를 한번 더 확인한다. L이 3이고 33322 와 같은 경우를 잡기 위해서이다. 실수한 내용 및 고찰 문제를 읽고 어떻게 접근할지 적어보면서 하니 확실히 헷갈리는 부분이 적어졌다. 하지만 행 혹은 열에 …","fields":{"slug":"/Algorithm/BackJoon/08.14890/"},"frontmatter":{"categories":"알고리즘","title":"백준 14890, 경사로","date":"August 10, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/07.3190/"}},"previous":{"fields":{"slug":"/Algorithm/SWEA/09.1288/"}}},{"node":{"id":"7340de19-71bf-5551-bd37-8f9cbedaf8ad","excerpt":"문제 푸는데 필요한 정보 우선 꼬리를 포함한 몸은 그대로 하고 머리만 다음칸 이동 벽이나 자기 자신의 몸과 부딪히면 종료 이동한 칸에 사과가 있다면 사과는 없어지고 머리는 그대로 없다면 몸길이를 줄여서 꼬리가 위치한 칸 비우기 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 현재 방향에 대한 정보를 담을 변수와 뱀의 몸통에 대한 정보를 담을 deque 자료구조와 visited를 활용한다. 뱀의 머리는 deque의 r쪽 꼬리는 l 쪽으로 위치해서 꼬리 처리는 popleft를 통해 하고 visited는 0으로 바꿔서 빈 공간으로 처리 실수한 내용 및 고찰 문제를 단계별로 풀려고 구현 단계를 정리하면서 풀었는데 많은 도움이 된거 같다. 하지만 문제를 제대로 읽지 않아 게임 시작 후 X초라는 설명을 X초마다로 이해해서 답이 나오지 않았었다. 또한 = 을 ==으로 처리하고 == 0 을 ==0로 처리하는등 사소한 실수를 아직도 많이 한다… 실제 코테에서는 이런 실수들이 더욱 보이지 않으니 …","fields":{"slug":"/Algorithm/BackJoon/07.3190/"},"frontmatter":{"categories":"알고리즘","title":"백준 3190, 뱀","date":"August 09, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/06.14499/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/08.14890/"}}},{"node":{"id":"744f8468-bcb3-5033-8fae-518f3d31af9a","excerpt":"문제 푸는데 필요한 정보 지도의 크기는 N X M 초기 주사위는 윗면은 1이고, 동쪽(오른쪽)을 바라보는 방향이 3인 상태로 놓여있음 주사위를 굴렸을 때 이동한 칸에 수가 0인지 아닌지에 따라 처리하는 경우의 수가 다름 주사위를 바깥으로 이동시키려고 하는 경우는 무시해야하며 출력도 해서는 안됌 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 주사위가 이동할 수 있는 방향은 상, 하, 좌, 우 이고 기억해야하는 값은 바닥면(cur), 반대면-윗면(op), 왼쪽(le), 오른쪽(ri), 위(up), 아래(dn)이다. 초기 값은 정해져 있고 함수를 통해 방향에 따라 값들을 변경해준다. 방향에 따른 값 변경은 아래와 같은 규칙을 가진다. 그 다음부터는 구현을 통해서 문제를 해결하면 된다. 실수한 내용 및 고찰 문제를 이해하는데 너무 많은 시간이 걸렸다. 쓰면서 문제를 빨리 이해하려고 노력해봐야겠다. 처음에는 주사위의 바닥면이 정해지면 상하좌우 값이 고정되어있다고 생각해서 풀었는데 같은 …","fields":{"slug":"/Algorithm/BackJoon/06.14499/"},"frontmatter":{"categories":"알고리즘","title":"백준 14499, 주사위 굴리기","date":"August 08, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/05.16234/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/07.3190/"}}},{"node":{"id":"1dc55a45-27d4-564e-ba31-05d0ec444c7c","excerpt":"문제 푸는데 필요한 정보 땅의 크기는 N x N, r행 c열에는 A[r][c]만큼의 인구가 존재 인접한 나라 사이에는 국경선이 존재 인구 이동은 하루 동안 진행 되며 인구 차이가 L 이상 R 이하인 국가 끼리는 국경선이 열림 - 연합 연합을 이루는 국가의 인구수는 (인구수 총합 / 국가의 수)가 된다. 소수점은 버림 문제 푸는데 필요한 알고리즘 dfs를 통해 해결할 수 있는 문제이다. 특정 방향 국가와는 연합이 가능하고 다른 방향 국가와는 연합이 불가능 할 수 있기에 전체 땅에서 연합은 1개 이상 존재할 수도있음 따라서 방문하지 않은 모든 노드에 대해 dfs를 수행한다. 인구 이동은 연합이 생기지 않을 때까지 반복되므로\r\nchanged 변수를 통해 인구 이동이 발생했는지를 확인한다. dfs를 수행할 때는 4방 탐색을 통해 진행 되며 연합이 생기는 나라의 인구 합도 같이 구한다. 연합이 생기는 경우에 chaged를 true로 설정한다. 또한 연합(4방 탐색을 통해 방문한 노드)를 기…","fields":{"slug":"/Algorithm/BackJoon/05.16234/"},"frontmatter":{"categories":"알고리즘","title":"백준 16234, 인구 이동","date":"August 07, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/04.1153/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/06.14499/"}}},{"node":{"id":"4a7a91ca-cc0e-5495-8a8a-a979387d3cf2","excerpt":"문제 푸는데 필요한 정보 임의의 자연수가 주어졌을 때 네 개의 소수의 합으로 분해해야 한다. 자연수의 범위가 1부터 1,000,000(백만)이다. 출력이 불가능한 경우는 -1을 출력한다. 문제 푸는데 필요한 알고리즘 백트래킹으로 접근해보았다. 분해해야하는 개수는 4개로 고정, 각각의 수는 모두 소수여야 하므로 주어지는 자연수 N이하의 모든 소수를 구해 배열을 구한다. 이 때 소수는 에라토스테네스의 체를 이용해 구한다. 길이가 4이고 합이 N일 때 문자열을 출력하고 종료하는 재귀함수를 작성한다. 배열의 모든 값에 대해 경우의 수를 찾는다. 찾는 중 길이가 4를 넘거나 합이 이미 N을 넘는 경우는 더 이상 찾을 필요가 없기에 이 때는 함수를 종료시킨다. 소수의 가장 작은 값부터 합을 더하기 시작하면 무조건 길이가 4가 될때까지 합 연산을 진행하게 되므로, 소수의 가장 큰 값부터 합을 더하기 시작해서 불필요한 연산들을 제거한다. (실수했던 부분)\r\n 실수한 내용 및 고찰 문제 자체는 어…","fields":{"slug":"/Algorithm/BackJoon/04.1153/"},"frontmatter":{"categories":"알고리즘","title":"백준 1153, 네 개의 소수","date":"August 06, 2023"}},"next":{"fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-deployment-test/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/05.16234/"}}},{"node":{"id":"1c1f9d70-da5f-5c47-8464-79e1d5f15360","excerpt":"개요 앞서 글에서 설명한 것처럼 SSAFY 2학기에 접어들면서 저 포함 6명의\r\n팀원이 함께 공통프로젝트를 진행하게 되었습니다. 공통프로젝트는 WebRTC를 이용한 프로젝트를 진행하게 되는데 제 개인 클라우드 서버(오라클)과 SSAFY에서 지급한 EC2(AWS)에 WebRTC를 간편하게 사용할 수 있게 해주는 openvidu 서버를 구축해보면서 경험한 여러 삽질과 제가 이해한 내용에 대해 정리해보려 합니다. 앞선 글을 읽고 이해하시면 아래 내용을 수행하는데 도움이 될거 같습니다. 목차 구축하고자 하는 환경 설명 설치 전 주의할 점 도커 설치 포트 개봉 Deployment 설치 파일 설정 실행시키기 NGINX 설정 변경 구축하고자 하는 환경 설명 openvidu를 통해 화상 기능을 제공하는 것이 저희 프로젝트의 가장 핵심 포인트였기에, 로컬에서 openvidu 도커 이미지를 돌리며 개발하는 것이 아닌 백엔드 팀원이 바로 실제 서버에 배포시키고, 프론트엔드는 해당 서버에 접속하며 개발…","fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-deployment-test/"},"frontmatter":{"categories":"개발공부 featured","title":"Openvidu Deployment EC2 온프레미스 구축 후기","date":"August 06, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/03.1013/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/04.1153/"}}},{"node":{"id":"f1b7ec26-111a-5c28-9728-05468eec2736","excerpt":"문제 푸는데 필요한 정보 전파의 기본 단위는 { 0 , 1 } 두 가지로 구성되어있으며, x+ ( ) 는 임의의 개수(최소 1개) x의 반복으로 이루어진 전파의 집합을 나타낸다. 반복을 의미하는 + 외에도 or 를 의미하는 | 기호가 있다. { x | y } 는 x 혹은 y 를 의미하는 것으로, { 0+ | 1+ } 는 { 0 , 1 , 00 , 11 , 000 , 111 , … } 의 집합을 의미한다. 정리하면 뒤에 ’+‘가 붙은 숫자는 최소 1번이상 반복되어야하며, 괄호 뒤에 붙은 경우는 해당 괄호가 1회 이상 반복되는 것이다. 문제에 있는 예시는 경우의 수가 순서대로 나오는 것이 아니여서 이해하는데 어려움이 있었다. 문제 푸는데 필요한 알고리즘 백트래킹으로 접근해보았다. 문제에서 제공하는 패턴인 (100+1+ | 01)+ 의 경우 우선 괄호안을 볼 때 100으로 시작하거나 100으로 시작하면 0이 반복 되어야 하고 0이 아닌 1이 나오게 되면 다음 0과 1에 따라 경우의 수가…","fields":{"slug":"/Algorithm/BackJoon/03.1013/"},"frontmatter":{"categories":"알고리즘","title":"백준 1013, Contact","date":"August 05, 2023"}},"next":{"fields":{"slug":"/Development/Linux/java-jdk-management/"}},"previous":{"fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-deployment-test/"}}},{"node":{"id":"4543335d-d9a1-53f2-a1a2-ac3f158a6160","excerpt":"개요 자바 설치 apt 패키지 인덱스 정보를 아래 명령어로 업데이트하여 자바 리스트를 갱신합니다. 원하는 자바 버전을 설치합니다. 아래 예시는 8버전과 16버전을 설치합니다. bashrc에 JAVA_HOME을 추가합니다. 많은 application(Apache Hadoop 등)은 자바 위치를 찾기위해  변수를 참조합니다. 이에 다른 어플리케이션에서 쉽게 사용할 수 있도록, JAVA_HOME을 설정합니다. (저는 바로 잘 잡았기에 실행하진 않았습니다.) bashrc 변경 사항을 적용하기 위해 아래 명령어를 통해 bashrc를 1회 실행합니다. 버전 변경 방법 Ubuntu에서 application들의 다양한 버전 관리를 담당하는 update-alternatives 명령어를 이용하여 설치된 자바 버전을 확인합니다. 버전을 변경하고자 한다면 아래 명령어 2가지를 실행한 후 java와 javac의 버전을 변경해 줍니다. 현재 자바 버전이 변경되었는지 확인합니다. 참조 Java JDK 설치 …","fields":{"slug":"/Development/Linux/java-jdk-management/"},"frontmatter":{"categories":"Ubuntu","title":"Ubuntu 20.04 자바 JDK 설치 및 버전 관리","date":"August 05, 2023"}},"next":{"fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-intro/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/03.1013/"}}},{"node":{"id":"c818d894-a606-53be-a0ce-5882d054204d","excerpt":"개요 SSAFY 2학기에 접어들면서 저 포함 6명의\r\n팀원이 함께 공통프로젝트를 진행하게 되었습니다. 원래는 openvidu를 온프레미스로 구축한 경험글 하나로 퉁쳐서 작성하려 했는데 생각보다 내용이 많아서 따로 정리하게 됩니다.\r\n\r\n WebRTC(Web Real-Time Communication)란 웹 브라우저가 서로 통신할 수 있도록 설계된 API 별도의 플러그인이나 소프트웨어 없이 실시간으로 데이터(음성, 영상, 텍스트, 파일)를 서버(중계자) 없이 브라우저 간에 교환할 수 있도록 하는 기술 WebRTC 기술은 P2P(Peer-to-Peer) 통신에 최적화 브라우저끼리 P2P 통신을 사용하기에 별도의 서버가 필요 없어 보이지만, 다음과 같은 서버들을 필요로한다. 시그널링(Signaling)이라 불리는, 클라이언트들의 통신을 조정하기 위한 메타데이터의 교환 서버 NAT 환경 및 방화벽 대응을 위한 서버(STUN / TURN Server)  Signaling / Server 서…","fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-intro/"},"frontmatter":{"categories":"개발공부 featured","title":"Openvidu란?","date":"August 04, 2023"}},"next":{"fields":{"slug":"/Development/SSAFY/chrome-(ERR_SSL_PROTOCOL_ERROR)/"}},"previous":{"fields":{"slug":"/Development/Linux/java-jdk-management/"}}},{"node":{"id":"76464767-8009-5b4a-a527-1129553d644d","excerpt":"젠킨스를 도커 컨테이너로 실행 후 사이트가 제대로 뜨지 않아 어떻게 해결해야할지 모르고 있었던 중\r\n임시?적인 해결법을 찾았다. 에러  해결방법 아래의 주소로 접속 그리고 본인의 도메인을 입력\r\n 출처","fields":{"slug":"/Development/SSAFY/chrome-(ERR_SSL_PROTOCOL_ERROR)/"},"frontmatter":{"categories":"개발공부","title":"chrome ERR_SSL_PROTOCOL_ERROR","date":"July 30, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/02.9251/"}},"previous":{"fields":{"slug":"/Development/SSAFY/openvidu-series/openvidu-intro/"}}},{"node":{"id":"29b44aba-bc46-55d1-bd89-1d49515bfbb9","excerpt":"문제 푸는데 필요한 정보 LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다. 예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다. 문제 푸는데 필요한 알고리즘 점화식을 세움으로써 해결할 수 있기에 해당 문제는 DP로 접근해야 한다. DP 테이블은 첫번째 (문자열의 길이+1) X (두번째 문자열의 길이+1) 크기의 2차원 배열이어야 한다. DP 테이블의 현재 값[x][y]이 정해지는 경우의 수는 총 2개이다. 두 문자열의 각각 위치[x][y]의 문자값이 같은 경우 이 두 문자는 아직 비교가 안되어야하기에 각 문자열의 -1 위치[x-1][y-1]에 대한 테이블 값에 +1을 한다. 같지 않은 경우 현재 문자가 다른 문자열의 이전 문자값([x-1][y] or [x][y-1])과 비교된 값 2개중 큰 값으로 정한다. 예를 들어 문자열이 ABCD와 ACBD…","fields":{"slug":"/Algorithm/BackJoon/02.9251/"},"frontmatter":{"categories":"알고리즘","title":"백준 9251, LCS","date":"July 27, 2023"}},"next":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-03/"}},"previous":{"fields":{"slug":"/Development/SSAFY/chrome-(ERR_SSL_PROTOCOL_ERROR)/"}}},{"node":{"id":"1d2342d1-c93c-55ad-a0f7-056f2f5cbd46","excerpt":"간단한 개념 및 요약본 프로토콜의 3요소 - 구문 / 의미 / 타이밍 선점형 스케줄링 알고리즘 유형 - 라운드 로빈 / SRT / 다단계 큐 / 다단계 피드백 큐 비선점형 스케줄링 알고리즘 유형 - 우선순위 / 기한부 / FCFS / SJF / HRN 트랜잭션 특성 - 원자성 / 일관성 / 격리성 / 영속성 해시 암호화 알고리즘의 종류 - MD5 / SHA-1 / SHA-256 / HAS-160 결합도 유형 순서(품질 낮음에서 높음으로) - 내용 > 공통 > 외부 > 제어 > 스템프 > 자료 응집도 유형 순서(품질 낮음에서 높음으로) - 우연적 > 논리적 > 시간적 > 절차적 > 통신적 > 순차적 > 기능적 반정규화의 주요 기법 - 테이블 병합 / 테이블 분할 / 중복 테이블 추가 / 컬럼 중복화 / 중복 관계 추가 OSI 7셰층의 특징 - 응용 계층 / 표현 계층 / 세션 계층 / 전송 계층 / 네트워크 계층 / 데이터링크 계층 / 물리 계층 애플리케이션 성능 측정 지표 - 처리…","fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-03/"},"frontmatter":{"categories":"자격증","title":"정보처리기사 실기 족보 3탄 공부","date":"July 20, 2023"}},"next":{"fields":{"slug":"/Development/Network/check-port/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/02.9251/"}}},{"node":{"id":"5733839c-5075-5b25-8d8e-b9576eedb069","excerpt":"오라클 클라우드로 데이터베이스 서버를 구축하면서 포트번호 관련 이슈들이 있었는데 해당 사이트를 통해\r\n손쉽게 포트번호가 열려있는지 확인할 수 있다. 포트번호가 열려있는지 확인할 수 있는 사이트","fields":{"slug":"/Development/Network/check-port/"},"frontmatter":{"categories":"개발정보","title":"포트가 열려있는지 확인할 수 있는 사이트","date":"July 19, 2023"}},"next":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-02/"}},"previous":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-03/"}}},{"node":{"id":"35f6d9da-5379-55c0-a192-1908bd1e6298","excerpt":"리팩토링의 목적 : 유지보수성 향상 - 복잡한 코드의 단순화, 소스의 가독성 향상 유연한 시스템 - 소프트웨어 요구사항 변경에 유연한 대응 생산성 향상 - 정제 및 최적화된 소스의 재사용 품질 향상 - 소프트웨어 오류발견이 용이하여 품질향상 (리팩토링은 소프트웨어 모듈의 외부적 기능은 수정하지 않고 내부적으로 구조, 관계 등을 단순화하여 소프트웨어의 유지보수성을 향상시키는 기법입니다.) OSPF의 특징 : 다익스트라 알고리즘 사용 - 다익스트라 알고리즘을 사용하는 내부 라우팅 프로토콜 라우팅 메트릭 지정 - 최조, 지연, 최대 처리량 등 관리자가 라우팅 메트릭 지정 AS분할 사용 - 자치 시스템을 지역으로나누어 라투잉을 효과적으로 관리 홉 카운트 무제한 - 홉 카운트에 제한이 없음 (OSPF(Open Shortest Path First)는 대표적인 내부 라우팅 프로토콜로 다익스트라 알고리즘을 이용한 대규모 네트워크에 적합한 링크 상태 라우팅 프로토콜로도 불리는 라우팅 프로토콜입니다…","fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-02/"},"frontmatter":{"categories":"자격증","title":"정보처리기사 실기 족보 2탄 공부","date":"July 17, 2023"}},"next":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-01/"}},"previous":{"fields":{"slug":"/Development/Network/check-port/"}}},{"node":{"id":"dd771358-7b88-5d59-95ca-9bcefe0fa394","excerpt":"살충제 패러독스 : 동일한 테스트 케이스에 의한 반복적 테스트는 새로운 버그를 찾지 못한다는 테스트의 원리 데이터 마이닝 : 대규모로 저장된 데이터 안에서 체계적이고 자동적으로 통계적 규칙이나 패턴을 찾아내는 기술 프로토콜의 3요소 : 구문(Syntax) - 시스템 간의 정보 전송을 위한 데이터 형식, 코딩, 신호 레벨 등을 규정 의미(Semantic) - 시스템 간의 정보 전송을 위한 제어 정보로 조정과 에러 처리를 위한 규정 타이밍(Timing) - 시스템 간의 정보 전송을 위한 속도 조절과 순서 관리 규정 (프로토콜은 복수의 컴퓨터 사이에서 데이터 통신을 원활하게 하기 위해 필요한 통신규약입니다. 대표적으로 흔히 사용되는 IP/TCP가 있습니다.) XML : 송.수신 시스템 간 데이터 연계의 필요성을 위해서 전송되는 데이터 구조를 동일한 형태로 정의 JSON : 비동기 브라우저 . 서버 통신(AJAX)을 위해 ‘속성-값 쌍’, ‘키-값 쌍’으로 이루어진 데이터 오브젝트를 전달…","fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-01/"},"frontmatter":{"categories":"자격증","title":"정보처리기사 실기 족보 1탄 공부","date":"July 16, 2023"}},"next":{"fields":{"slug":"/Algorithm/BackJoon/01.2206/"}},"previous":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-02/"}}},{"node":{"id":"0575b4f0-aabd-53d1-b4c2-77cb0ff24cb6","excerpt":"문제 푸는데 필요한 정보 N X M 행렬로 표현되는 맵이 주어짐 0은 이동할 수 있는 곳, 1은 이동할 수 없는 곳 (1, 1)에서 (N, M)의 위치까지 최단 경로로 이동해야함 최단 경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말함 이 때 시작하는 칸과 끝나는 칸도 포함해서 세야함 이동 도중 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 한 개까지 부수고 이동해도 됌 한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸 문제 푸는데 필요한 알고리즘 전체적인 풀이법은 BFS를 통한 최단 경로를 구해내는 것과 유사하다. 하지만 이동 도중 벽을 한번 부술 수 있다는 것이 차이점 방문 처리의 경우에도 단순한 2차원 배열로는 불가능하다 한 지역이라도 벽을 부수고 온 경우와 벽을 부수지 않고 온 경우가 존재하기 때문 따라서 3차원 배열로 구현 ( 1일 때는 아직 부수지 않음, 0일 때는 이미 부수고 옴) 현재 위치에서 이동할 수 있는 경우의 수는 총 3가지이다. 벽을 부수지 …","fields":{"slug":"/Algorithm/BackJoon/01.2206/"},"frontmatter":{"categories":"알고리즘","title":"백준 2206, 벽 부수고 이동하기","date":"July 15, 2023"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/certificate/Engineer-Information_Processing/Practice-01/"}}},{"node":{"id":"87b7ce23-f4b4-50fb-813d-647458f73a0d","excerpt":"제 블로그의 테마나 Gatsby의 다른 테마를 활용해서 Github Blog를 만들고 싶은 분들이 계실텐데요! 이런 분들에게 도움을 드리고자 이 글을 쓰게 되었습니다. 잘 안되는 부분이나 궁금한 점을 댓글로 남겨주면 확인해보고 답변 드리도록 하겠습니다! 1. Repository 생성하기 GitHub Blog를 만들려면 Github에 Repository를 생성해야 합니다.  GitHub에 로그인 한 뒤에 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성 페이지로 이동하게 됩니다. 이 때 Import a repository 버튼을 클릭합니다.  아래 페이지에 도달하시면 두 가지 정보를 넣어주셔야 하는데, Your old repository’s clone URL에는 사용하고자 하는 gatsby 테마가 있는 repository의 주소를 넣어주시면 됩니다. 제 블로그 테마를 쓰고 싶으신 분들은 여기에 https://github.com/zoomKoding/…","fields":{"slug":"/gatsby-github-blog/"},"frontmatter":{"categories":"블로그","title":"Gatsby 테마로 GitHub Blog 만들기","date":"July 06, 2021"}},"next":{"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}},"previous":{"fields":{"slug":"/Algorithm/BackJoon/01.2206/"}}},{"node":{"id":"a0d64e1b-02f3-545d-8e1d-414240c038b2","excerpt":"👋 소개 블로그를 직접 운영하면서 조금씩 그려봤던 이상적인 개발 블로그 테마를 Gatsby를 통해 만들어보게 되었습니다. 이 테마가 블로그를 운영하고자 하시는 분들에게 자신의 이야기를 잘 담을 수 있는 공간이 되었으면 좋겠습니다.🙌 블로그 테마가 맘에 드셨다면 아래 과정을 통해 자신의 블로그를 만들어보시길 바랍니다! 혹시 만드시는 과정에서 궁금하신 점이나 어려움이 있으시다면 이슈를 통해 문의 남겨주세요! 스타는 블로그 테마를 지속적으로 발전시키는데 큰 힘이 됩니다!⭐️ 🚀 시작하기 Github Page나 Netlify 중 원하시는 배포 환경에 따라 다음 과정을 진행하시면 빠르게 블로그를 만드실 수 있습니다. 🦖 GitHub Page로 만들기 깃헙 페이지를 통해 블로그를 만드시다면 아래 글을 참고해주세요! Gatsby 테마로 GitHub Blog 만들기 🔧 Netlify로 만들기 아래 버튼을 활용하면 개인 계정에 를 사용하고 있는 Repository 생성과 Netlify에 배포를 동시…","fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"},"frontmatter":{"categories":"블로그","title":"쉽고 빠르게 나만의 개츠비(Gatsby) 블로그 만들기","date":"March 22, 2021"}},"next":null,"previous":{"fields":{"slug":"/gatsby-github-blog/"}}}],"categories":["All","알고리즘","개발공부","featured","Ubuntu","자격증","개발정보","블로그"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}