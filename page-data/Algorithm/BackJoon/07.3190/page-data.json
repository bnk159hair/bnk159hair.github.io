{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Algorithm/BackJoon/07.3190/",
    "result": {"data":{"cur":{"id":"7340de19-71bf-5551-bd37-8f9cbedaf8ad","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>우선 꼬리를 포함한 몸은 그대로 하고 머리만 다음칸 이동</li>\n<li>벽이나 자기 자신의 몸과 부딪히면 종료</li>\n<li>이동한 칸에 사과가 있다면 사과는 없어지고 머리는 그대로</li>\n<li>없다면 몸길이를 줄여서 꼬리가 위치한 칸 비우기</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ul>\n<li>\n<p>구현해야하는 문제이다</p>\n</li>\n<li>\n<p>현재 방향에 대한 정보를 담을 변수와 뱀의 몸통에 대한 정보를 담을 deque 자료구조와 visited를 활용한다.</p>\n</li>\n<li>\n<p>뱀의 머리는 deque의 r쪽 꼬리는 l 쪽으로 위치해서 꼬리 처리는 popleft를 통해 하고 visited는 0으로 바꿔서 빈 공간으로 처리</p>\n<br/>\n<br/>\r\n<br/>\n</li>\n</ul>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>문제를 단계별로 풀려고 구현 단계를 정리하면서 풀었는데 많은 도움이 된거 같다.</li>\n<li>하지만 문제를 제대로 읽지 않아 게임 시작 후 X초라는 설명을 X초마다로 이해해서 답이 나오지 않았었다.</li>\n<li>또한 = 을 ==으로 처리하고 == 0 을 ==0로 처리하는등 사소한 실수를 아직도 많이 한다…</li>\n<li>실제 코테에서는 이런 실수들이 더욱 보이지 않으니 더 꼼꼼히 푸는 연습을 해야겠다.</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 0,0 위치에 오른쪽 방향, visited는 true, deque에는 (0,0) 하나</span>\r\n<span class=\"token comment\"># 바라보는 방향으로 한칸 이동 (0, 1) , 벽이나 visited 통해서 게임 끝인지 판단</span>\r\n<span class=\"token comment\"># deque에 0,1 넣고 visited처리</span>\r\n<span class=\"token comment\"># 이동한 칸에 사과가 있다면 사과 없애고 deque 유지</span>\r\n<span class=\"token comment\"># 없다면 deque popleft하기</span>\r\n<span class=\"token keyword\">import</span> sys\r\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\r\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\r\nN <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nK <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token builtin\">dir</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\nMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    Map<span class=\"token punctuation\">[</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n\r\nMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>  <span class=\"token comment\"># false 대신 -1로 처리</span>\r\nbody <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nbody<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nL <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nOp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    t<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    t <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\r\n    Op<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\ntime <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\nidx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\nCheck <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\r\n    time <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n    new_x <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">]</span>\r\n    new_y <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">if</span> new_x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> new_x <span class=\"token operator\">>=</span> N <span class=\"token keyword\">or</span> new_y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> new_y <span class=\"token operator\">>=</span> N <span class=\"token keyword\">or</span> Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n\r\n        <span class=\"token keyword\">break</span>\r\n    body<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>new_x<span class=\"token punctuation\">,</span> new_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">if</span> Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n        Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\r\n    <span class=\"token keyword\">elif</span> Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n        Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\r\n        tail <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        Map<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n    <span class=\"token keyword\">if</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>Op<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> Op<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> time<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> Op<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token builtin\">dir</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span>\r\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token builtin\">dir</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span>\r\n        idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","excerpt":"문제 푸는데 필요한 정보 우선 꼬리를 포함한 몸은 그대로 하고 머리만 다음칸 이동 벽이나 자기 자신의 몸과 부딪히면 종료 이동한 칸에 사과가 있다면 사과는 없어지고 머리는 그대로 없다면 몸길이를 줄여서 꼬리가 위치한 칸 비우기 문제 푸는데 필요한 알고리즘 구현해야하는 문제이다 현재 방향에 대한 정보를 담을 변수와 뱀의 몸통에 대한 정보를 담을 deque 자료구조와 visited를 활용한다. 뱀의 머리는 deque의 r쪽 꼬리는 l 쪽으로 위치해서 꼬리 처리는 popleft를 통해 하고 visited는 0으로 바꿔서 빈 공간으로 처리 실수한 내용 및 고찰 문제를 단계별로 풀려고 구현 단계를 정리하면서 풀었는데 많은 도움이 된거 같다. 하지만 문제를 제대로 읽지 않아 게임 시작 후 X초라는 설명을 X초마다로 이해해서 답이 나오지 않았었다. 또한 = 을 ==으로 처리하고 == 0 을 ==0로 처리하는등 사소한 실수를 아직도 많이 한다… 실제 코테에서는 이런 실수들이 더욱 보이지 않으니 …","frontmatter":{"date":"August 09, 2023","title":"백준 3190, 뱀","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/BackJoon/07.3190/"}},"next":{"id":"744f8468-bcb3-5033-8fae-518f3d31af9a","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>지도의 크기는 N X M</li>\n<li>초기 주사위는 윗면은 1이고, 동쪽(오른쪽)을 바라보는 방향이 3인 상태로 놓여있음</li>\n<li>주사위를 굴렸을 때 이동한 칸에 수가 0인지 아닌지에 따라 처리하는 경우의 수가 다름</li>\n<li>주사위를 바깥으로 이동시키려고 하는 경우는 무시해야하며 출력도 해서는 안됌</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ul>\n<li>구현해야하는 문제이다</li>\n<li>주사위가 이동할 수 있는 방향은 상, 하, 좌, 우 이고 기억해야하는 값은 바닥면(cur), 반대면-윗면(op), 왼쪽(le), 오른쪽(ri), 위(up), 아래(dn)이다.</li>\n<li>초기 값은 정해져 있고 함수를 통해 방향에 따라 값들을 변경해준다.</li>\n<li>방향에 따른 값 변경은 아래와 같은 규칙을 가진다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># up l, r 그대로 up->cur cur->dn dn->op op->up</span>\r\n<span class=\"token comment\"># dn l, r 그대로 dn->cur cur->up up->op op->dn</span>\r\n<span class=\"token comment\"># le u, d 그대로 le->cur cur->ri op->le ri->op</span>\r\n<span class=\"token comment\"># re u, d 그대로 ri->cur cur->le op->ri le->op</span></code></pre></div>\n<ul>\n<li>\n<p>그 다음부터는 구현을 통해서 문제를 해결하면 된다.</p>\n<br/>\n<br/>\r\n<br/>\n</li>\n</ul>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>문제를 이해하는데 너무 많은 시간이 걸렸다. 쓰면서 문제를 빨리 이해하려고 노력해봐야겠다.</li>\n<li>처음에는 주사위의 바닥면이 정해지면 상하좌우 값이 고정되어있다고 생각해서 풀었는데 같은 바닥면이여도 어떻게 굴렀는지에 따라 방향값이 다를 수 있음을 알게 되었다. 직접 쓰면서 예시를 보았으면 진작에 알 수 있는 부분이었는데 이걸 제대로 못해 2시간이 걸렸다…</li>\n<li>x, y 변수를 계속해서 헷갈리는데 잘 처리해서 사용해야겠다…</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\r\n\r\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\r\n\r\n<span class=\"token comment\"># 중요 바깥으로 이동시키는 경우는 출력X, 무시</span>\r\n\r\n<span class=\"token comment\"># 각 면마다 어떤수를 가지고 있는지 기억하기</span>\r\n<span class=\"token comment\"># 각 면의 맞은편 면은 어떤거지도 기억하기 두 면의 합은 7이어야함</span>\r\n<span class=\"token comment\"># 시작면 바닥 면은 6</span>\r\n<span class=\"token comment\"># 경우의 수는 1. 이동한 칸에 쓰여있는 수가 0이면 바닥면의 수가 칸에 복사</span>\r\n<span class=\"token comment\"># 2. 0이 아니 ㄴ경우에는 칸에 쓰여있는수가 주사위의 바닥면으로 복사, 칸 수는 0</span>\r\n\r\n\r\nmem <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># cur up dn le ri op</span>\r\n<span class=\"token comment\"># up l, r 그대로 up->cur cur->dn dn->op op->up</span>\r\n<span class=\"token comment\"># dn l, r 그대로 dn->cur cur->up up->op op->dn</span>\r\n<span class=\"token comment\"># le u, d 그대로 le->cur cur->ri op->le ri->op</span>\r\n<span class=\"token comment\"># re u, d 그대로 ri->cur cur->le op->ri le->op</span>\r\n\r\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\ndice_mem <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">,</span> mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n        ri <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\r\n        cur <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n        op <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\n        le <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ri\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> le\r\n    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n        le <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\r\n        cur <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n        op <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\n        ri <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> le\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ri\r\n    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\r\n        up <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n        cur <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n        dn <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\r\n        op <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> up\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dn\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        up <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n        cur <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n        dn <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\r\n        op <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dn\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> op\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> up\r\n        mem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur\r\n\r\n\r\nN<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> K <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\nOp <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> Op<span class=\"token punctuation\">:</span>\r\n\r\n    new_x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n    new_y <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">if</span> new_x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> new_x <span class=\"token operator\">>=</span> N <span class=\"token keyword\">or</span> new_y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> new_y <span class=\"token operator\">>=</span> M<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">continue</span>\r\n\r\n    change<span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mem<span class=\"token punctuation\">)</span>\r\n    cur <span class=\"token operator\">=</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 이동</span>\r\n\r\n    <span class=\"token keyword\">if</span> Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 이동한 칸에 쓰여있는 수가 0일 때</span>\r\n        Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dice_mem<span class=\"token punctuation\">[</span>cur<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 이동한 칸이 0 이 아닌 경우, 값복사 하고 0으로</span>\r\n        dice_mem<span class=\"token punctuation\">[</span>cur<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span>\r\n        Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dice_mem<span class=\"token punctuation\">[</span>mem<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 현재면 출력</span>\r\n\r\n    x <span class=\"token operator\">=</span> new_x\r\n    y <span class=\"token operator\">=</span> new_y\r\n\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 08, 2023","title":"백준 14499, 주사위 굴리기","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/BackJoon/06.14499/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://bnk159hair.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/Algorithm/BackJoon/07.3190/","nextSlug":"/Algorithm/BackJoon/06.14499/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}