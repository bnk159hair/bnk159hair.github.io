{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Algorithm/BackJoon/13.14891/",
    "result": {"data":{"cur":{"id":"47038c77-926a-58c5-8475-9d23b9d5febd","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>\n<p>8개의 톱니를 가진 톱니바퀴 4개가 일렬로 놓여져있음</p>\n</li>\n<li>\n<p>톱니는 N극 또는 S극 중 하나</p>\n</li>\n<li>\n<p>가장 왼쪽부터 오른쪽 톱니바뀌까지 1~4번</p>\n</li>\n<li>\n<p>회전은 한칸을 기준, 시계방향, 반시계방향 존재</p>\n</li>\n<li>\n<p>회전 후 맞닿은 극에 따라 다른 톱니가 회전할 수 있음</p>\n</li>\n<li>\n<p>맛닿은 톱니의 극이 다르다면 먼저 회전한 톱니의 방향과 반대방향으로 회전</p>\n</li>\n<li>\n<p>1~4번째 줄은 각 n번째 톱니바퀴의 상태</p>\n</li>\n<li>\n<p>상태는 8개의 정수</p>\n</li>\n<li>\n<p>12시 방향부터 시계 방향대로 순서가 주어짐</p>\n</li>\n<li>\n<p>N극은 0, S극은 1</p>\n</li>\n<li>\n<p>다섯째 줄은 회전횟수 K가 주어짐</p>\n</li>\n<li>\n<p>다음 k개 줄에는 회전시킬 톱니 번호와 방향이 주어짐</p>\n</li>\n<li>\n<p>방향이 1인 경우 시계 방향, -1인 경우는 반시계 방향</p>\n</li>\n<li>\n<p>K는 1부터 100</p>\n</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ul>\n<li>\n<p>각각의 톱니바퀴를 deque으로 설정</p>\n</li>\n<li>\n<p>0번째를 12시방향으로 설정해서 시계방향으로 값 저장</p>\n</li>\n<li>\n<p>시계방향으로 회전할 경우 pop해서, appendleft 실행</p>\n</li>\n<li>\n<p>반시계방향으로 회전할 경우 popleft해서 append 실행</p>\n</li>\n<li>\n<p>회전전 해당 톱니바퀴에서 왼쪽으로 검사 시행, 이 때 이전 톱니의 회전 방향 기억</p>\n</li>\n<li>\n<p>왼쪽 검사 후 오른쪽으로 검사</p>\n</li>\n<li>\n<p>1번의 2번째 인덱스와 2번의 6번째 인덱스가 맞닿음</p>\n</li>\n<li>\n<p>2번의 2번째 인덱스와 3번의 6번째 인덱스가 맞닿음</p>\n</li>\n<li>\n<p>3번의 2번째 인덱스와 4번의 6번째 인덱스가 맞닿음</p>\n</li>\n<li>\n<p>맞닿은 값들이 다른 경우 반대방향으로 회전</p>\n</li>\n<li>\n<p>회전 후 맞닿은 값을 확인하는 것이 아닌 회전 하기 전 다른 값이면 회전 시 반대 방향으로 회전하기에</p>\n</li>\n<li>\n<p>재귀 호출로 해결</p>\n<br/>\n<br/>\r\n<br/>\n</li>\n</ul>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>처음에 문제의 예시를 제대로 읽지 않고 마음대로 해석해서 시간낭비를 했다.\n<ul>\n<li>회전 후 맞닿은 극이 아니라, 회전하기전 맞닿은 극을 확인하고 다를 경우, 회전시 반대로 회전하는 것이다.</li>\n</ul>\n</li>\n<li>인덱스를 적은 부분에서 사소한 변수 실수를 한다. 이러한 부분을 좀 더 조심해야겠다.</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\r\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\r\n\r\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\r\n\r\ntopni <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        topni<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\r\n\r\nK <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\norder <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># num에 -1 해서 전달해야함</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n        topni<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span>topni<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        topni<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>topni<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">propagateleft</span><span class=\"token punctuation\">(</span>nth<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># nth에 -1해서 전달해야함</span>\r\n    <span class=\"token keyword\">if</span> nth <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span>\r\n    <span class=\"token keyword\">if</span> topni<span class=\"token punctuation\">[</span>nth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> topni<span class=\"token punctuation\">[</span>nth<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        propagateleft<span class=\"token punctuation\">(</span>nth<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n        rotate<span class=\"token punctuation\">(</span>nth<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">propagateright</span><span class=\"token punctuation\">(</span>nth<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">if</span> nth <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span>\r\n    <span class=\"token keyword\">if</span> topni<span class=\"token punctuation\">[</span>nth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> topni<span class=\"token punctuation\">[</span>nth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        propagateright<span class=\"token punctuation\">(</span>nth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n        rotate<span class=\"token punctuation\">(</span>nth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">calsum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> topni<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n            result <span class=\"token operator\">+=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">return</span> result\r\n\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    num<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">=</span> order<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n\r\n    propagateleft<span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n    propagateright<span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n    rotate<span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","excerpt":"문제 푸는데 필요한 정보 8개의 톱니를 가진 톱니바퀴 4개가 일렬로 놓여져있음 톱니는 N극 또는 S극 중 하나 가장 왼쪽부터 오른쪽 톱니바뀌까지 1~4번 회전은 한칸을 기준, 시계방향, 반시계방향 존재 회전 후 맞닿은 극에 따라 다른 톱니가 회전할 수 있음 맛닿은 톱니의 극이 다르다면 먼저 회전한 톱니의 방향과 반대방향으로 회전 1~4번째 줄은 각 n번째 톱니바퀴의 상태 상태는 8개의 정수 12시 방향부터 시계 방향대로 순서가 주어짐 N극은 0, S극은 1 다섯째 줄은 회전횟수 K가 주어짐 다음 k개 줄에는 회전시킬 톱니 번호와 방향이 주어짐 방향이 1인 경우 시계 방향, -1인 경우는 반시계 방향 K는 1부터 100 문제 푸는데 필요한 알고리즘 각각의 톱니바퀴를 deque으로 설정 0번째를 12시방향으로 설정해서 시계방향으로 값 저장 시계방향으로 회전할 경우 pop해서, appendleft 실행 반시계방향으로 회전할 경우 popleft해서 append 실행 회전전 해당 톱니바퀴에…","frontmatter":{"date":"August 16, 2023","title":"백준 14891, 톱니바퀴","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/BackJoon/13.14891/"}},"next":{"id":"0eac63c1-e6d8-592b-8fc5-71ab7fa697e4","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>처음에 양분은 모든 칸에 5만큼 들어가 있음</li>\n<li>같은 칸에 여러 개의 나무가 심어져 있을 수 있음</li>\n<li>M개의 나무를 심음가능하지만</li>\n<li>봄에는 나무가 자신의 나이만큼 양분을 먹음, 나이 1증가</li>\n<li>하나의 칸에 여러개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹음</li>\n<li>자신의 나이만큼 양분을 먹을 수 없는 나무는 양분은 못먹고 죽음</li>\n<li>여름에는 죽은 나무가 양분으로 변하게 됌 죽은 나무의 나이 // 2 가 증가</li>\n<li>가을에는 나무가 번식함, 번식하는 나무는 나이가 5의 배수여야함</li>\n<li>인접한 8개의 칸에 나이가 1인 나무가 생김, 땅을 벗어나는 칸은 생기지 않음</li>\n<li>로봇이 돌아디니면서 땅에 양분을 추가함, 각 칸에 추가되는 양은 A[r][c]</li>\n<li>K년이 지난 후 상도의 땅에 살아있는 나무의 개수를 구하라</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ol>\n<li>N x N 사이즈의 deque를 원소로 갖는 2차원 배열을 생성, 양분을 원소로갖는 배열도 생성</li>\n<li>필요한 위치에 나무를 appendleft 해서 작은 값이 0번째에 있도록 배치</li>\n<li>봄 시작, popleft하면서 기존 양분보다 작거나 같을 경우 처리 -> 새로운 배열에 넣음\r\n3-1. 이때 5의 배수가 되는 것이 있는 곳은 기억</li>\n<li>현재 원소가 새로운 리스트를 가리키게 하고 이전 배열에서 남아있는 것들은 양분처리</li>\n<li>가을 시작, 앞서 5의 배수가 되는 애들 카운트 해서 새로운 나무 추가</li>\n<li>겨울 시작, 각 위치에 양분 추가</li>\n<li>1년 완료, 각 원소 리스트 길이 합치기</li>\n</ol>\n  <br/>\n  <br/>\r\n  <br/>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>입력값 받은 것을 다르게 사용해서 틀렸었다. 입력값에 대한 주석도 달아야겠다.</li>\n<li>f_mem을 제대로 초기화 하지않아서 문제가 생겼었다. 초기화 하는 부분도 신경써야겠다.</li>\n<li>확실히 문제를 어떻게 풀지 주석을 달고 각각 코드에 대한 주석도 작성하니 디버깅하기가 쉬워졌다.</li>\n<li>삽입하고 값을 얻는 과정에서 우선순위 큐를 사용해서 시간초과가 발생했다.\n<ul>\n<li>값이 들어가고 빼는 과정이 봄, 여름과 가을에 번식할 때만 있는데 이 때 넣는 순서만 잘 넣어주면 정렬 된다는 것이 보장되기에 그냥 deque으로 해야지 시간 문제가 발생안한다.</li>\n</ul>\n</li>\n<li>또한 (봄 여름), (가을 겨울) 코드를 함수로 빼니 시간 차이가 80ms 정도 차이난다. 자주 사용되는 부분은 함수로 빼는 것도 습관화 해야겠다.</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\r\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\r\n<span class=\"token keyword\">import</span> heapq\r\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\r\n\r\nN<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> K <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nto_add <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\nt_Map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\nn_Map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\nf_mem <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    X<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> O <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    t_Map<span class=\"token punctuation\">[</span>X<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Y<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span>O<span class=\"token punctuation\">)</span>\r\n\r\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">SW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    new_tree <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    five_check <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\r\n    <span class=\"token keyword\">while</span> t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> n_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        value <span class=\"token operator\">=</span> t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        n_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> value\r\n        new_tree<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 5의 배수이면</span>\r\n            five_check <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 기억해야해서</span>\r\n    <span class=\"token comment\"># 나무가 없거나 영양분이 모자랄 경우는 아래</span>\r\n    <span class=\"token comment\"># 영양분이 모자랄 경우에는 나머지 죽여야함</span>\r\n    <span class=\"token comment\"># 여름 기능</span>\r\n    <span class=\"token keyword\">for</span> d_tree <span class=\"token keyword\">in</span> t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        n_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>d_tree<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\r\n    t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_tree  <span class=\"token comment\"># 새로운 배열로 가리킴</span>\r\n    <span class=\"token keyword\">if</span> five_check<span class=\"token punctuation\">:</span>\r\n        f_mem<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">FW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">for</span> info <span class=\"token keyword\">in</span> f_mem<span class=\"token punctuation\">:</span>\r\n        X<span class=\"token punctuation\">,</span> Y <span class=\"token operator\">=</span> info\r\n        <span class=\"token keyword\">for</span> Tree <span class=\"token keyword\">in</span> t_Map<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> Tree <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n                    new_x <span class=\"token operator\">=</span> X <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n                    new_y <span class=\"token operator\">=</span> Y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n                    <span class=\"token keyword\">if</span> new_x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> new_x <span class=\"token operator\">>=</span> N <span class=\"token keyword\">or</span> new_y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> new_y <span class=\"token operator\">>=</span> N<span class=\"token punctuation\">:</span>\r\n                        <span class=\"token keyword\">continue</span>\r\n                    t_Map<span class=\"token punctuation\">[</span>new_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>new_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\"># 겨울 시작</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            n_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> to_add<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\r\n\r\n\r\n<span class=\"token keyword\">for</span> year <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    f_mem <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\"># 봄 시작</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">if</span> t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 나무가 존재할 경우</span>\r\n                <span class=\"token comment\"># 나무가 존재하고 0번째 값이 영양분보다 작을 경우</span>\r\n                SW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\"># 가을 시작</span>\r\n    FW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\nresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\r\n        result <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>t_Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\r\n\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 15, 2023","title":"백준 16235, 나무 재테크","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/BackJoon/12.16235/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://bnk159hair.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/Algorithm/BackJoon/13.14891/","nextSlug":"/Algorithm/BackJoon/12.16235/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}