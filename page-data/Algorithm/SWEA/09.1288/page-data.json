{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Algorithm/SWEA/09.1288/",
    "result": {"data":{"cur":{"id":"1e3a6aa2-c480-575b-a70b-9d9c9a256391","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>N번 양의 배수를 셈</li>\n<li>수에서 본 숫자를 확인해야함</li>\n<li>최소 몇번 양을 센 시점에 0에서 9까지의 모든 숫자를 볼 수 있는지 구해야 함</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ul>\n<li>\n<p>비트마스킹을 통해 쉽게 풀 수 있다.</p>\n</li>\n<li>\n<p>k번까지 세면서 지금까지 나온 수를 bit에 저장한다</p>\n</li>\n<li>\n<p>n개의 1로 이루어진 비트를 쉽게 구하려면 1을 n번 shift하고 -1을 해주면 된다</p>\n<br/>\n<br/>\r\n<br/>\n</li>\n</ul>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>비트마스킹 사용하는 법을 알고 있었지만 n개의 1로 이루어진 비트를 shift하고 -1을 해줘서 구하는 방법은 생각을 못했었다.</li>\n<li>오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">javacode<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Samsung_B<span class=\"token punctuation\">.</span>Week1</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution_1288</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// StringTokenizer st = new StringTokenizer(null, null, false)</span>\r\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> checkV <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> t<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">int</span> bit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> val<span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>num<span class=\"token operator\">>=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>num<span class=\"token operator\">/=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                    bit <span class=\"token operator\">=</span> bit <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                bit <span class=\"token operator\">=</span> bit <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bit <span class=\"token operator\">==</span>checkV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">+</span>t<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>val<span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","excerpt":"문제 푸는데 필요한 정보 N번 양의 배수를 셈 수에서 본 숫자를 확인해야함 최소 몇번 양을 센 시점에 0에서 9까지의 모든 숫자를 볼 수 있는지 구해야 함 문제 푸는데 필요한 알고리즘 비트마스킹을 통해 쉽게 풀 수 있다. k번까지 세면서 지금까지 나온 수를 bit에 저장한다 n개의 1로 이루어진 비트를 쉽게 구하려면 1을 n번 shift하고 -1을 해주면 된다 실수한 내용 및 고찰 비트마스킹 사용하는 법을 알고 있었지만 n개의 1로 이루어진 비트를 shift하고 -1을 해줘서 구하는 방법은 생각을 못했었다. 오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다 코드 문제 푸는데 필요한 정보 문제 푸는데 필요한 알고리즘 실수한 내용 및 고찰 코드","frontmatter":{"date":"August 12, 2023","title":"SWEA 1288, 새로운 불면증 치료법","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/SWEA/09.1288/"}},"next":{"id":"75833b96-e6fa-5f95-890d-f665e8e26af3","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>길이란 한 행 또는 열 전부를 나타냄</li>\n<li>경사로가 높아지는지, 낮아지는지에 따라 처리가 다름</li>\n<li>L=2인 경우, 높이3 2개, 높이2 2개, 높이1 2개는 가능하지만</li>\n<li>높이3 2개, 높이2 2개, 높이3 2개는 불가능하기 때문</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ul>\n<li>\n<p>구현해야하는 문제이다</p>\n</li>\n<li>\n<p>시작은 왼쪽값 혹은 위쪽값</p>\n</li>\n<li>\n<p>초기값(0번째 인덱스) 설정하고 다음 값이 같으면 개수 count를 한다</p>\n</li>\n<li>\n<p>다른 값이면 차이가 1인지 확인하고</p>\n<ul>\n<li>높이가 높아지면 지금 센 개수가 L 이상인지 확인한다</li>\n<li>높이가 낮아지면 다시 개수를 count, check = true로 설정한다. (check는 개수를 파악해야함을 의미한다)</li>\n</ul>\n</li>\n<li>\n<p>차이가 2이상이면 실패 처리를 한다.</p>\n</li>\n<li>\n<p>해당 행 혹은 열에 대해 탐색이 끝나고 check를 한번 더 확인한다. L이 3이고 33322 와 같은 경우를 잡기 위해서이다.</p>\n<br/>\n<br/>\r\n<br/>\n</li>\n</ul>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>문제를 읽고 어떻게 접근할지 적어보면서 하니 확실히 헷갈리는 부분이 적어졌다.</li>\n<li>하지만 행 혹은 열에 대한 탐색이 끝나고 check를 확인하고 개수가 모자라지 않는지는 확인을 못해줬었다.</li>\n<li>이러한 부분을 좀더 꼼꼼히 챙겨야겠다.</li>\n<li>그리고 지금은 경우의 수가 다를 때 중복된 코드가 너무 많은데 다음에는 초반에 귀찮더라도 다른 변수가 필요한 곳만 조건문으로 처리해주어야겠다.\n<ul>\n<li>소프티어 코테 같이 ctrl + c, v 가 안되는 곳이 있을 수 있기에…</li>\n<li>그리고 수정할 때 고쳐야 할 부분이 더블이 되는 것도 힘들다</li>\n</ul>\n</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\r\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\r\n\r\nN<span class=\"token punctuation\">,</span> L <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\nMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    DownCheck <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n        st <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\r\n            <span class=\"token keyword\">if</span> Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> st <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n                cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n\r\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> st<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n                    <span class=\"token keyword\">if</span> DownCheck<span class=\"token punctuation\">:</span>\r\n                        cnt <span class=\"token operator\">-=</span> L\r\n                        <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n                    <span class=\"token keyword\">if</span> Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> st <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 높아졌을 때</span>\r\n                        st <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n                        <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">>=</span> L<span class=\"token punctuation\">:</span>\r\n                            cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n                            DownCheck <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\r\n                            <span class=\"token keyword\">continue</span>\r\n                        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n                    <span class=\"token keyword\">elif</span> st <span class=\"token operator\">-</span> Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 낮아졌을 때</span>\r\n                        st <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n                        cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n                        DownCheck <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n        st <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span>\r\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n\r\n            <span class=\"token keyword\">if</span> Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> st <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n                cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n\r\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> st<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\r\n                    <span class=\"token keyword\">if</span> DownCheck<span class=\"token punctuation\">:</span>\r\n                        cnt <span class=\"token operator\">-=</span> L\r\n                        <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n                    <span class=\"token keyword\">if</span> Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> st <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 높아졌을 때</span>\r\n                        st <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span>\r\n                        <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">>=</span> L<span class=\"token punctuation\">:</span>\r\n                            cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n                            DownCheck <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\r\n                            <span class=\"token keyword\">continue</span>\r\n                        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n                    <span class=\"token keyword\">elif</span> st <span class=\"token operator\">-</span> Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 낮아졌을 때</span>\r\n                        st <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">]</span>\r\n                        cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\r\n                        DownCheck <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n    <span class=\"token keyword\">if</span> DownCheck<span class=\"token punctuation\">:</span>\r\n        cnt <span class=\"token operator\">-=</span> L\r\n        <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\r\n\r\n\r\nresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> Find<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            result <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\r\n\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 10, 2023","title":"백준 14890, 경사로","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/BackJoon/08.14890/"}},"prev":{"id":"678c02e4-6a13-5e6d-aefa-fcf08e0e7c4a","html":"<br/>\n<h2 id=\"문제-푸는데-필요한-정보\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\" aria-label=\"문제 푸는데 필요한 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 정보</h2>\n<ul>\n<li>N, M이 주어지고 M의 마지막 N개의 비트가 모두 켜져 있으면 ON, 꺼져있으면 OFF를 출력해야한다.</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"문제-푸는데-필요한-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"문제 푸는데 필요한 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 푸는데 필요한 알고리즘</h2>\n<ul>\n<li>\n<p>비트마스킹을 통해 풀 수 있다.</p>\n</li>\n<li>\n<p>N개의 1로 이루어진 bit와 M을 AND 연산을 통해 N개의 1로 이루어진 bit이 그대로 나오면 ON을 출력하면 된다.</p>\n<br/>\n<br/>\r\n<br/>\n</li>\n</ul>\n<h2 id=\"실수한-내용-및-고찰\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\" aria-label=\"실수한 내용 및 고찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수한 내용 및 고찰</h2>\n<ul>\n<li>오랜만에 java를 하려니 헷갈리는게 많은데 파이썬과 자바 둘 다 열심히 해야겠다</li>\n<li>특강에서 다른 분이 삼항연산자를 통해 푼 것을 보고 이번 풀이에 적용해보았는데 빠르게 조건문을 구현할 수 있어서 좋은거 같다.</li>\n</ul>\n<br/>\r\n<br/>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution_10726</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> TC <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">StringTokenizer</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> t<span class=\"token operator\">&lt;=</span>TC<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">int</span> bit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bit <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>bit <span class=\"token operator\">?</span> <span class=\"token string\">\"ON\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"OFF\"</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">+</span>t<span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n\r\n</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%95%EB%B3%B4\">문제 푸는데 필요한 정보</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%91%B8%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">문제 푸는데 필요한 알고리즘</a></li>\n<li><a href=\"#%EC%8B%A4%EC%88%98%ED%95%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EA%B3%A0%EC%B0%B0\">실수한 내용 및 고찰</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 13, 2023","title":"SWEA 10726, 이진수 표현","categories":"알고리즘","author":"하이영","emoji":"🔮"},"fields":{"slug":"/Algorithm/SWEA/10.10726/"}},"site":{"siteMetadata":{"siteUrl":"https://bnk159hair.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/Algorithm/SWEA/09.1288/","nextSlug":"/Algorithm/BackJoon/08.14890/","prevSlug":"/Algorithm/SWEA/10.10726/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}